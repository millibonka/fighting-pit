from player import Player


class AutomaticFight:
    """Class representing and simulating a single fight.
    
    It verifies if the challenger and defender are both NPCs, fetches
    the rolls generated by both players, compares the results and 
    tracks the winner. From here the players ranking place is updated.
    """
    def __init__(self, challenger: Player, defender: Player):
        self.challenger = challenger #
        self.defender = defender
        self.results = [] # list of strings used in the fight_commentary method 
        self.challenger_rolls = self.challenger.generate_rolls()
        self.defender_rolls = self.defender.generate_rolls()
        self.challenger_won = self.compare_results()
        self.update_player_rankings()
        
    @property
    def challenger(self):
        return self._challenger
    @challenger.setter
    def challenger(self, value):
        if value.is_pc: # only NPCs participate in the automatic fights
            raise ValueError
        elif value.place == 1: # the challenger can't be #1
            raise ValueError
        else:
            self._challenger = value
    
    @property
    def defender(self):
        return self._defender
    
    @defender.setter
    def defender(self, value):
        if value.is_pc: # only NPCs defend in the automatic fights
            raise ValueError
        else:
            self._defender = value
    
    def fight_commentary(self):
        """
        Method that generates the commentary for the fight describing
        everything that happens.
        """
        print("------------------")
        print(f"{self.challenger.player_name} challenges ",\
            f"{self.defender.player_name} to a fight!")
        for fight_round in range(3):
            print("* * *")
            print(f"ROUND {fight_round+1}")
            print(f"The challenger rolls {self.challenger_rolls[fight_round]}")
            print(f"The defender rolls {self.defender_rolls[fight_round]}")
            print(f"The challenger {self.results[fight_round]}")
        print(f"\n{self.challenger.player_name} {self.results[3]} the fight!")
        
    def compare_results(self)->bool:
        """This function compares the three values in defender_rolls
        against chalenger_rolls and gives a point to the challenger
        for each round where they scored a higher number than the defender.

        Returns:
            bool: Returns True if the challenger won, False if the defender won.
        """
        challenger_points = 0
        for num in range(3):
            if self.challenger_rolls[num] > self.defender_rolls[num]:
                challenger_points += 1
                self.results.append("WINS!")
            else:
                self.results.append("LOSES!")
                
        if challenger_points >= 2:
            self.results.append("WINS")
            return True
        else:
            self.results.append("LOSES")
            return False
        
    def update_player_rankings(self):
        """Method calls methods that update player ranking places if the
        challenger won.
        """
        if self.challenger_won:
            self.challenger.is_winner()
            self.defender.is_loser()
    